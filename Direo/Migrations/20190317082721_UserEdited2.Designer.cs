// <auto-generated />
using System;
using Direo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Direo.Migrations
{
    [DbContext(typeof(DireoContext))]
    [Migration("20190317082721_UserEdited2")]
    partial class UserEdited2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Direo.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Direo.Models.Place", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Desc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Facebook")
                        .HasMaxLength(150);

                    b.Property<string>("Instagram")
                        .HasMaxLength(150);

                    b.Property<string>("Lat")
                        .HasMaxLength(100);

                    b.Property<string>("Lon")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Twitter")
                        .HasMaxLength(150);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Website")
                        .HasMaxLength(150);

                    b.Property<string>("Youtube")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Direo.Models.PlaceStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("StatusId");

                    b.ToTable("PlaceStatuses");
                });

            modelBuilder.Entity("Direo.Models.PlaceTag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TagId");

                    b.ToTable("PlaceTags");
                });

            modelBuilder.Entity("Direo.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Direo.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Direo.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("About");

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Gender");

                    b.Property<string>("Google")
                        .HasMaxLength(150);

                    b.Property<string>("Linkedin")
                        .HasMaxLength(150);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Profile")
                        .HasMaxLength(100);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<string>("Twitter")
                        .HasMaxLength(150);

                    b.Property<string>("Website")
                        .HasMaxLength(150);

                    b.Property<string>("Youtube")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Direo.Models.UserLike", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("PlaceId")
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLikes");
                });

            modelBuilder.Entity("Direo.Models.WorkHour", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<TimeSpan>("Close")
                        .HasColumnType("time");

                    b.Property<int>("Day");

                    b.Property<TimeSpan>("Open")
                        .HasColumnType("time");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("WorkHours");
                });

            modelBuilder.Entity("Direo.Models.Place", b =>
                {
                    b.HasOne("Direo.Models.Category", "Category")
                        .WithMany("Places")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Direo.Models.User", "User")
                        .WithMany("Places")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Direo.Models.PlaceStatus", b =>
                {
                    b.HasOne("Direo.Models.Place", "Place")
                        .WithMany("PlaceStatuses")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Direo.Models.Status", "Status")
                        .WithMany("PlaceStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Direo.Models.PlaceTag", b =>
                {
                    b.HasOne("Direo.Models.Place", "Place")
                        .WithMany("PlaceTags")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Direo.Models.Tag", "Tag")
                        .WithMany("PlaceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Direo.Models.UserLike", b =>
                {
                    b.HasOne("Direo.Models.Place", "Place")
                        .WithMany("UserLikes")
                        .HasForeignKey("PlaceId");

                    b.HasOne("Direo.Models.User", "User")
                        .WithMany("UserLikes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Direo.Models.WorkHour", b =>
                {
                    b.HasOne("Direo.Models.Place", "Place")
                        .WithMany("WorkHours")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
